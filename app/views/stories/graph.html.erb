<div class="container">
  <%= render 'shared/navigation' %>

  <h1><%= t('graph.title') %></h1>
  <div class="message-container"></div>
  <div class="row">
    <div class="col-lg-12">
      <div class="wrapper">
        <div class="sigma" id="sig"></div>
        <input type="hidden" id="story_id", value="<%= @story.id %>">
          <div class="col-lg-12">
            <div class="not-used"></div>
          </div>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  $(document).ready(function(){

    $.ajax({
      url: "graph_json?id="+<%= @story.id %>,
      type: "GET",
      dataType: "json",
      success: function(data) {

        if (data["valid"]) {

          // writting nodes
          var getNodes = data["references"].map(function(reference) {
            return {
              data: {
                id: "Cap " + reference.number,
                description: reference.description
              },
              position: {
                x: reference.x*500,
                y: reference.y*500
              },
              css: {
                'background-color': reference.color
              }
            }
          });

          // getting edges
          var getEdges = []
          data["chapter_destinies"].forEach(function(chapterDestiny) {
            var source = chapterDestiny.source;
            var destinies = chapterDestiny.destinies;
            destinies.forEach(function(destiny) {
              getEdges.push(
                  {
                    data: {
                      id: source + "-" + destiny,
                      weight: 10,
                      source: "Cap " + source,
                      target: "Cap " + destiny
                    },
                    css: {
                      'line-color': chapterDestiny.infos[2],
                      'target-arrow-color': chapterDestiny.infos[2]
                    }
                  }
                );
            });
          });

          var elementsJson = {
            nodes: getNodes,
            edges: getEdges
          }

          var cy = cytoscape({
            container: document.getElementById('sig'),
            elements: {
              nodes: getNodes,
              edges: getEdges
            },
            selected: false,
            selectable: true,
            style: [
              {
                selector: 'node',
                css: {
                  'width': 'mapData(baz, 0, 10, 10, 40)',
                  'height': 'mapData(baz, 0, 10, 10, 40)',
                  'content': 'data(id)',
                  'color': '#FFFFFF',
                  'font-size': '15px'
                }
              },
              {
                selector: 'edge',
                css: {
                  'width': 2,
                  'target-arrow-shape': 'triangle',
                  'opacity': 0.8
                }
              },
              {
                selector: ':selected',
                css: {
                  'background-color': '#FF0000',
                  'line-color': '#FF0000',
                  'target-arrow-color': '#FF0000',
                  'source-arrow-color': '#FF0000',
                  'opacity': 1
                }
              }
            ],
            layout: {
              name: 'preset',
              padding: 10
            },
            ready: function(){

            }
          });

          cy.on('tapend', 'node', function(evt){
            // TODO: implement ajax to update position of graph node

            var node = evt.cyTarget;
            console.log( 'dragged ' + node.id() );
            console.log(node.position());
            $.ajax({
              url: 'node_update',
              type: 'POST',
              data: {
                id: <%= @story.id %>,
                x: parseFloat(node.position().x) / 500.0,
                y: parseFloat(node.position().y) / 500.0,
                cap: node.id()
              },
              success: function(data) {
                console.log("success");
              },
              error: function(error) {
                console.log("error");
              }
            });
          });

          // making elements tips
          cy.nodes().qtip({
            content: function(){ return this._private.data.description; },
            position: {
              my: 'top center',
              at: 'bottom center'
            },
            style: {
              classes: 'qtip-bootstrap',
              tip: {
                width: 16,
                height: 8
              }
            }
          });
        
          // writting not used chapters
          var notUsed = "<h3>"+ "<%= t('graph.not_used_chapters') %>" +"</h3>";
          notUsed += "<p>";
          for (i=0;i<data["not_used"].length;i++) {
            if (i%10==0 && i!=0) {
              notUsed += data["not_used"][i] + "<br>";
            } else {
              notUsed += data["not_used"][i] + ", ";
            }
          }
          notUsed += "</p>";
          $(".not-used").html(notUsed);
        }
      }
    });
  });
</script>

<%= render partial: 'publish_script' %>