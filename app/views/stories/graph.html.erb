<%= javascript_include_tag "sigma" %>

<div class="container">
  <h1><%= t('graph.title') %></h1>
  <div class="message-container"></div>
  <div class="row">
    <div class="col-lg-12">
      <div class="wrapper">
        <%= simple_form_for(@story) do |f| %>
          <div class="actions">
            <%= f.submit t('actions.finish_editing'), class: "btn btn-primary" %>
            <%= f.submit t('actions.edit_chapters'), class: "btn btn-primary" %>
            <%= f.submit t('actions.edit_items'), class: "btn btn-primary" %>
            <%= f.submit t('actions.edit_special_attributes'), class: "btn btn-primary" %>
            <%= f.submit t('actions.save'), class: "btn btn-primary" %>
            <% f.object.published ? publish_val = t('actions.unpublish') : publish_val = t('actions.publish') %>
            <%= link_to publish_val, "javascript:;", id: "publish", class: "btn btn-primary" %>
          </div>
        <% end %>
        <div class="sigma" id="sig"></div>
          <div class="col-lg-12">
            <div class="not-used"></div>
          </div>
      </div>
    </div>
  </div>
</div>

<script type="text/javascript">
  $(document).ready(function(){

    $.ajax({
      url: "graph_json?id="+<%= @story.id %>,
      type: "GET",
      dataType: "json",
      success: function(data) {

        if (data["valid"]) {
         var sigRoot = document.getElementById('sig');
         var sigInst = sigma.init(sigRoot).drawingProperties({
           defaultLabelColor: '#ccc',
           defaultLabelSize: 10,
           font: 'Arial',
           edgeColor: 'source',
           defaultEdgeType: 'curve',
           defaultEdgeArrow: 'target',
           labelThreshold: 0
         }).graphProperties({
           minNodeSize: 0.5,
           maxNodeSize: 5,
           maxEdgeSize: 3
         }).mouseProperties({
           maxRatio: 32
         });

        // writting nodes
         for (var i=0;i<data["references"].length;i++) {
           sigInst.addNode('cap'+data["references"][i], {
             label: 'cap '+data["references"][i],
             color: data["infos"][i][2],
             x: data["infos"][i][0],
             y: data["infos"][i][1]
           }).draw();
         }

         // writting edges
         for (var k=0;k<data["chapter_destinies"].length;k++) {
           if ((data["chapter_destinies"][k].length != 0) && data["valid"][k]) {
             for (var l=1;l<data["chapter_destinies"][k].length;l++) {
               sigInst.addEdge('cap'+data["chapter_destinies"][k][0]+'_cap'+data["chapter_destinies"][k][l], 'cap'+data["chapter_destinies"][k][0], 'cap'+data["chapter_destinies"][k][l]).draw();
             }
           }
          }
        
          // writting not used chapters
          var notUsed = "<h3>"+ "<%= t('graph.not_used_chapters') %>" +"</h3>";
          notUsed += "<p>";
          for (i=0;i<data["not_used"].length;i++) {
            if (i%10==0 && i!=0) {
              notUsed += data["not_used"][i] + "<br>";
            } else {
              notUsed += data["not_used"][i] + ", ";
            }
          }
          notUsed += "</p>";
          $(".not-used").html(notUsed);

          // change color of other nodes and edges to grey when mouseover
          var greyColor = '#666';
          sigInst.bind('overnodes',function(event){
            var nodes = event.content;
            var neighbors = {};
            sigInst.iterEdges(function(e){
              if(nodes.indexOf(e.source)<0 && nodes.indexOf(e.target)<0){
                if(!e.attr['grey']){
                  e.attr['true_color'] = e.color;
                  e.color = greyColor;
                  e.attr['grey'] = 1;
                }
              }else{
                e.color = e.attr['grey'] ? e.attr['true_color'] : e.color;
                e.attr['grey'] = 0;

                neighbors[e.source] = 1;
                neighbors[e.target] = 1;
              }
            }).iterNodes(function(n){
              if(!neighbors[n.id]){
                if(!n.attr['grey']){
                  n.attr['true_color'] = n.color;
                  n.color = greyColor;
                  n.attr['grey'] = 1;
                }
              }else{
                n.color = n.attr['grey'] ? n.attr['true_color'] : n.color;
                n.attr['grey'] = 0;
              }
            }).draw(2,2,2);
          }).bind('outnodes',function(){
            sigInst.iterEdges(function(e){
              e.color = e.attr['grey'] ? e.attr['true_color'] : e.color;
              e.attr['grey'] = 0;
            }).iterNodes(function(n){
              n.color = n.attr['grey'] ? n.attr['true_color'] : n.color;
              n.attr['grey'] = 0;
            }).draw(2,2,2);
          });
        }
      }
    });
  });
</script>

<%= render partial: 'publish_script' %>